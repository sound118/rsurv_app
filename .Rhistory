runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
lung
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
library(ggplot2)
library(thematic)
theme_set(theme_minimal())
thematic_on()
ggplot(mtcars, aes(wt, mpg, color = factor(cyl))) +
geom_point()
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
library(shiny)
library(ggplot2)
library(thematic)
# Call thematic_shiny() prior to launching the app, to change
# R plot theming defaults for all the plots generated in the app
thematic_shiny(font = "auto")
ui <- fluidPage(
# bslib makes it easy to customize CSS styles for things
# rendered by the browser, like tabsetPanel()
# https://rstudio.github.io/bslib
theme = bslib::bs_theme(
bg = "#002B36", fg = "#EEE8D5", primary = "#2AA198",
# bslib also makes it easy to import CSS fonts
# base_font = bslib::font_google("Pacifico")
),
tabsetPanel(
type = "pills",
tabPanel("ggplot", plotOutput("ggplot")),
tabPanel("lattice", plotOutput("lattice")),
tabPanel("base", plotOutput("base"))
)
)
server <- function(input, output) {
output$ggplot <- renderPlot({
ggplot(mtcars, aes(wt, mpg, label = rownames(mtcars), color = factor(cyl))) +
geom_point() +
ggrepel::geom_text_repel()
})
output$lattice <- renderPlot({
lattice::show.settings()
})
output$base <- renderPlot({
image(volcano, col = thematic_get_option("sequential"))
})
}
shinyApp(ui, server)
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
lung
write.csv(lung, file = "/Users/jian.yang/Desktop/lung.csv")
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
library(ggplot2)
library(thematic)
theme_set(theme_minimal())
thematic_on()
ggplot(mtcars, aes(wt, mpg, color = factor(cyl))) +
geom_point()
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
library(bslib)
bs4_card
renderDataTable()
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
shiny::runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
library(survminer)
library(survival)
####Using "lung" dataset with cox model
data("lung")
# fit <- coxph(Surv(time = time, event = status) ~ rx, data = colon)
# fit1 <- survfit(Surv(time = time, event = status) ~ rx, data = colon)
res.cox <- coxph(Surv(time, status) ~ sex, data = lung)
res.cox
# Plot the baseline survival function
ggsurvplot(survfit(res.cox, data = lung), color = "#2E9FDF",
ggtheme = theme_minimal())
library(bslib)
library(thematic)
thematic::thematic_on(bg = "#222222", fg = "white", accent = "#0CE3AC", font = "Oxanium")
theme_set(theme_bw())
####Using "lung" dataset with cox model
data("lung")
res.cox <- coxph(Surv(time, status) ~ sex, data = lung)
res.cox
# Plot the baseline survival function
ggsurvplot(survfit(res.cox, data = lung), color = "#2E9FDF",
ggtheme = theme_minimal())
library(survminer)
library(survival)
library(bslib)
library(thematic)
thematic::thematic_on(bg = "#222222", fg = "white", accent = "#0CE3AC", font = "Oxanium")
theme_set(theme_bw())
####Using "lung" dataset with cox model
data("lung")
# fit <- coxph(Surv(time = time, event = status) ~ rx, data = colon)
# fit1 <- survfit(Surv(time = time, event = status) ~ rx, data = colon)
res.cox <- coxph(Surv(time, status) ~ sex, data = lung)
res.cox
# Plot the baseline survival function
ggsurvplot(survfit(res.cox, data = lung), color = "#2E9FDF",
ggtheme = theme_bw())
library(ggplot2)
thematic::thematic_on(bg = "#222222", fg = "white", accent = "#0CE3AC", font = "Oxanium")
ggp <- ggplot(mtcars, aes(wt, mpg, label = rownames(mtcars), color = factor(cyl))) +
geom_point() +
ggrepel::geom_text_repel()
ggp
library(ggrepel)
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
fit <- survfit(res.cox, newdata = sex_df)
ggsurvplot(fit, data=sex_df, pval = TRUE, conf.int = TRUE, legend.labs=c("Sex=Male", "Sex=Female"),
ggtheme = theme_survminer() + theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
theme(plot.subtitle = element_text(hjust = 0.5, size = 16, face = "italic"))+    # Change ggplot2 theme
theme(plot.background = element_rect(fill = "#002B36", colour = "#002B36"))+
theme(panel.background = element_rect(fill = "#002B36", colour = "#002B36")),
risk.table = TRUE)
# Create the new data
sex_df <- with(lung,
data.frame(sex = c(1, 2),
age = rep(mean(age, na.rm = TRUE), 2),
ph.ecog = c(1, 1)
)
)
sex_df
# Survival curves with cox model
fit <- survfit(res.cox, newdata = sex_df)
ggsurvplot(fit, data=sex_df, pval = TRUE, conf.int = TRUE, legend.labs=c("Sex=Male", "Sex=Female"),
ggtheme = theme_survminer() + theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
theme(plot.subtitle = element_text(hjust = 0.5, size = 16, face = "italic"))+    # Change ggplot2 theme
theme(plot.background = element_rect(fill = "#002B36", colour = "#002B36"))+
theme(panel.background = element_rect(fill = "#002B36", colour = "#002B36")),
risk.table = TRUE)
p <- ggsurvplot(fit, data=sex_df, pval = TRUE, conf.int = TRUE, legend.labs=c("Sex=Male", "Sex=Female"),
ggtheme = theme_survminer() + theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
theme(plot.subtitle = element_text(hjust = 0.5, size = 16, face = "italic"))+    # Change ggplot2 theme
theme(plot.background = element_rect(fill = "#002B36", colour = "#002B36"))+
theme(panel.background = element_rect(fill = "#002B36", colour = "#002B36")),
risk.table = TRUE)
class(p)
p[[1]]
class(p[[1]])
p[[2]]
clera
p
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
fit <- survfit(res.cox, newdata = sex_df)
p <- ggsurvplot(fit, data=sex_df, pval = TRUE, conf.int = TRUE, legend.labs=c("Sex=Male", "Sex=Female"),
ggtheme = theme_survminer() + theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
theme(plot.subtitle = element_text(hjust = 0.5, size = 16, face = "italic"))   # Change ggplot2 theme
# theme(plot.background = element_rect(fill = "#002B36", colour = "#002B36"))+
# theme(panel.background = element_rect(fill = "#002B36", colour = "#002B36")),
risk.table = TRUE)
fit <- survfit(res.cox, newdata = sex_df)
p <- ggsurvplot(fit, data=sex_df, pval = TRUE, conf.int = TRUE, legend.labs=c("Sex=Male", "Sex=Female"),
ggtheme = theme_survminer() + theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
theme(plot.subtitle = element_text(hjust = 0.5, size = 16, face = "italic")),   # Change ggplot2 theme
# theme(plot.background = element_rect(fill = "#002B36", colour = "#002B36"))+
# theme(panel.background = element_rect(fill = "#002B36", colour = "#002B36")),
risk.table = TRUE)
p
fit
sex_df
# Create the new data
sex_df <- with(lung,
data.frame(sex = c(1, 2),
age = rep(mean(age, na.rm = TRUE), 2),
ph.ecog = c(1, 1)
)
)
sex_df
# Survival curves with cox model
fit <- survfit(res.cox, newdata = sex_df)
p <- ggsurvplot(fit, data=sex_df, pval = TRUE, conf.int = TRUE, legend.labs=c("Sex=Male", "Sex=Female"),
ggtheme = theme_survminer() + theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
theme(plot.subtitle = element_text(hjust = 0.5, size = 16, face = "italic")),   # Change ggplot2 theme
# theme(plot.background = element_rect(fill = "#002B36", colour = "#002B36"))+
# theme(panel.background = element_rect(fill = "#002B36", colour = "#002B36")),
risk.table = TRUE)
p
library(survminer)
library(survival)
library(bslib)
library(thematic)
res.cox <- coxph(Surv(time, status) ~ sex, data = lung)
res.cox
sex_df <- with(lung,
data.frame(sex = c(1, 2),
age = rep(mean(age, na.rm = TRUE), 2),
ph.ecog = c(1, 1)
)
)
sex_df
# Survival curves with cox model
fit <- survfit(res.cox, newdata = sex_df)
p <- ggsurvplot(fit, data=sex_df, pval = TRUE, conf.int = TRUE, legend.labs=c("Sex=Male", "Sex=Female"),
ggtheme = theme_survminer() + theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
theme(plot.subtitle = element_text(hjust = 0.5, size = 16, face = "italic")),   # Change ggplot2 theme
# theme(plot.background = element_rect(fill = "#002B36", colour = "#002B36"))+
# theme(panel.background = element_rect(fill = "#002B36", colour = "#002B36")),
risk.table = TRUE)
p
class(p)
p$plot
class(p$plot)
class(p$table)
?ggtheme
p <- ggsurvplot(fit, data=sex_df, pval = TRUE, conf.int = TRUE, legend.labs=c("Sex=Male", "Sex=Female"),
ggtheme = theme(plot.background = element_rect(fill = "#002B36", colour = "#002B36")) + theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
theme(plot.subtitle = element_text(hjust = 0.5, size = 16, face = "italic")),   # Change ggplot2 theme
# theme(plot.background = element_rect(fill = "#002B36", colour = "#002B36"))+
# theme(panel.background = element_rect(fill = "#002B36", colour = "#002B36")),
risk.table = TRUE)
p
p <- ggsurvplot(fit, data=sex_df, pval = TRUE, conf.int = TRUE, legend.labs=c("Sex=Male", "Sex=Female"),
ggtheme = theme(plot.background = element_rect(fill = "#002B36", colour = "#002B36"), panel.background = element_rect(fill = "#002B36", colour = "#002B36")) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
theme(plot.subtitle = element_text(hjust = 0.5, size = 16, face = "italic")),   # Change ggplot2 theme
# theme(plot.background = element_rect(fill = "#002B36", colour = "#002B36"))+
# theme(panel.background = element_rect(fill = "#002B36", colour = "#002B36")),
risk.table = TRUE)
p
p <- ggsurvplot(fit, data=sex_df, pval = TRUE, conf.int = TRUE, legend.labs=c("Sex=Male", "Sex=Female"),
ggtheme = theme(plot.background = element_rect(fill = "#002B36", colour = "#002B36")) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
theme(plot.subtitle = element_text(hjust = 0.5, size = 16, face = "italic")),   # Change ggplot2 theme
# theme(plot.background = element_rect(fill = "#002B36", colour = "#002B36"))+
# theme(panel.background = element_rect(fill = "#002B36", colour = "#002B36")),
risk.table = TRUE)
p
theme_survminer()
?theme_survminer()
p <- ggsurvplot(fit, data=sex_df, pval = TRUE, conf.int = TRUE, legend.labs=c("Sex=Male", "Sex=Female"),
ggtheme = theme(plot.background = element_rect(fill = "#002B36", colour = "#002B36"), panel.background = element_rect(fill = "#002B36", colour = "#002B36")) +
theme(theme_survminer())+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
theme(plot.subtitle = element_text(hjust = 0.5, size = 16, face = "italic")),   # Change ggplot2 theme
# theme(plot.background = element_rect(fill = "#002B36", colour = "#002B36"))+
# theme(panel.background = element_rect(fill = "#002B36", colour = "#002B36")),
risk.table = TRUE)
p
shiny::runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
colon <- within(colon, {
sex <- factor(sex, labels = c("female", "male"))
differ <- factor(differ, labels = c("well", "moderate", "poor"))
extent <- factor(extent, labels = c("submuc.", "muscle", "serosa", "contig."))
})
bigmodel <-
coxph(Surv(time, status) ~ sex + rx + adhere + differ + extent + node4,
data = colon )
p3 <- ggforest(bigmodel)
p3
class(p3)
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
ggforest
p3 <- ggforest(bigmodel) +
theme(plot.background = element_rect(fill = "#002B36", colour = "#002B36"))
p3
p3$theme
p3 <- ggforest(bigmodel)+
theme(plot.background = element_rect(fill = "#002B36", colour = "#002B36"))+
theme(panel.background = element_rect(fill = "#002B36", colour = "#002B36"))+
theme(legend.background = element_rect(fill = "#002B36", colour = "#002B36"))
p3
p3$data
P3$
C
CLEAR
clear
ggforest
colon <- within(colon, {
sex <- factor(sex, labels = c("female", "male"))
differ <- factor(differ, labels = c("well", "moderate", "poor"))
extent <- factor(extent, labels = c("submuc.", "muscle", "serosa", "contig."))
})
bigmodel <-
coxph(Surv(time, status) ~ sex + rx + adhere + differ + extent + node4,
data = colon )
p3 <- ggforest(bigmodel)+
theme(plot.background = element_rect(fill = "#002B36", colour = "#002B36"))+
theme(panel.background = element_rect(fill = "#002B36", colour = "#002B36"))+
theme(legend.background = element_rect(fill = "#002B36", colour = "#002B36"))
p3
library(survminer)
library(survival)
library(bslib)
library(thematic)
colon <- within(colon, {
sex <- factor(sex, labels = c("female", "male"))
differ <- factor(differ, labels = c("well", "moderate", "poor"))
extent <- factor(extent, labels = c("submuc.", "muscle", "serosa", "contig."))
})
bigmodel <-
coxph(Surv(time, status) ~ sex + rx + adhere + differ + extent + node4,
data = colon )
p3 <- ggforest(bigmodel)+
theme(plot.background = element_rect(fill = "#002B36", colour = "#002B36"))+
theme(panel.background = element_rect(fill = "#002B36", colour = "#002B36"))+
theme(legend.background = element_rect(fill = "#002B36", colour = "#002B36"))
p3
shiny::runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
ggp <- ggplot(mtcars, aes(wt, mpg, label = rownames(mtcars), color = factor(cyl))) +
geom_point() +
ggrepel::geom_text_repel()
ggp
thematic::thematic_on(bg = "#222222", fg = "white", accent = "#0CE3AC", font = "Oxanium")
ggp
class(ggp)
class(p3)
p3 <- ggforest(bigmodel)+
theme(plot.background = element_rect(fill = "#002B36", colour = "#002B36"))+
theme(panel.background = element_rect(fill = "#002B36", colour = "#002B36"))+
theme(legend.background = element_rect(fill = "#002B36", colour = "#002B36"))+
ggrepel::geom_text_repel()
p3
p3 <- ggforest(bigmodel)+
theme(plot.background = element_rect(fill = "#002B36", colour = "black"))+
theme(panel.background = element_rect(fill = "#002B36", colour = "black"))+
theme(legend.background = element_rect(fill = "#002B36", colour = "black"))+
ggrepel::geom_text_repel()
p3
p3 <- ggforest(bigmodel)+
theme(plot.background = element_rect(fill = "#222222", colour = "#222222"))+
theme(panel.background = element_rect(fill = "#222222", colour = "#222222"))+
theme(legend.background = element_rect(fill = "#222222", colour = "#222222"))+
ggrepel::geom_text_repel()
p3
p3 <- ggforest(bigmodel)
ggrepel::geom_text_repel()
p3
thematic::thematic_on(bg = "#222222", accent = "#0CE3AC", font = "Oxanium")
p3 <- ggforest(bigmodel)
ggrepel::geom_text_repel()
p3
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
thematic::thematic_on(bg = "#222222", fg = "#222222", accent = "#0CE3AC", font = "Oxanium")
p3 <- ggforest(bigmodel)+
theme(plot.background = element_rect(fill = "#222222", colour = "#222222"))+
theme(panel.background = element_rect(fill = "#222222", colour = "#222222"))+
theme(legend.background = element_rect(fill = "#222222", colour = "#222222"))+
ggrepel::geom_text_repel()
p3
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
p3 <- ggforest(bigmodel)+
theme(plot.background = element_rect(fill = "#222222", colour = "#222222"))+
theme(panel.background = element_rect(fill = "#222222", colour = "#222222"))+
theme(legend.background = element_rect(fill = "#222222", colour = "#222222"))+
ggrepel::geom_text_repel()
p3
thematic::thematic_on(bg = "#222222", fg = "white", accent = "#0CE3AC", font = "Oxanium")
p3 <- ggforest(bigmodel)+
theme(plot.background = element_rect(fill = "#222222", colour = "#222222"))+
theme(panel.background = element_rect(fill = "#222222", colour = "#222222"))+
theme(legend.background = element_rect(fill = "#222222", colour = "#222222"))+
ggrepel::geom_text_repel()
p3
thematic::thematic_on(bg = "#222222", fg = "#222222", accent = "#0CE3AC", font = "Oxanium")
p3 <- ggforest(bigmodel)+
theme(plot.background = element_rect(fill = "#222222", colour = "#222222"))+
theme(panel.background = element_rect(fill = "#222222", colour = "#222222"))+
theme(legend.background = element_rect(fill = "#222222", colour = "#222222"))+
ggrepel::geom_text_repel()
p3
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
library(shiny)
library(ggplot2)
library(thematic)
# Call thematic_shiny() prior to launching the app, to change
# R plot theming defaults for all the plots generated in the app
thematic_shiny(font = "auto")
ui <- fluidPage(
# bslib makes it easy to customize CSS styles for things
# rendered by the browser, like tabsetPanel()
# https://rstudio.github.io/bslib
theme = bslib::bs_theme(
bg = "#002B36", fg = "#EEE8D5", primary = "#2AA198",
# bslib also makes it easy to import CSS fonts
# base_font = bslib::font_google("Pacifico")
),
tabsetPanel(
type = "pills",
tabPanel("ggplot", plotOutput("ggplot")),
tabPanel("lattice", plotOutput("lattice")),
tabPanel("base", plotOutput("base"))
)
)
server <- function(input, output) {
output$ggplot <- renderPlot({
ggplot(mtcars, aes(wt, mpg, label = rownames(mtcars), color = factor(cyl))) +
geom_point() +
ggrepel::geom_text_repel()
})
output$lattice <- renderPlot({
lattice::show.settings()
})
output$base <- renderPlot({
image(volcano, col = thematic_get_option("sequential"))
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
library(thematic)
# Call thematic_shiny() prior to launching the app, to change
# R plot theming defaults for all the plots generated in the app
thematic_shiny(font = "auto")
ui <- fluidPage(
# bslib makes it easy to customize CSS styles for things
# rendered by the browser, like tabsetPanel()
# https://rstudio.github.io/bslib
theme = bslib::bs_theme(
bg = "#002B36", fg = "#EEE8D5", primary = "#2AA198",
# bslib also makes it easy to import CSS fonts
# base_font = bslib::font_google("Pacifico")
),
tabsetPanel(
type = "pills",
tabPanel("ggplot", plotOutput("ggplot")),
tabPanel("lattice", plotOutput("lattice")),
tabPanel("base", plotOutput("base"))
)
)
server <- function(input, output) {
output$ggplot <- renderPlot({
ggplot(mtcars, aes(wt, mpg, label = rownames(mtcars), color = factor(cyl))) +
geom_point() +
ggrepel::geom_text_repel()
})
output$lattice <- renderPlot({
lattice::show.settings()
})
output$base <- renderPlot({
image(volcano, col = thematic_get_option("sequential"))
})
}
shinyApp(ui, server)
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
lung
?cor
symnum(clS <- cor(longley, method = "spearman"))
x <- c(44.4, 45.9, 41.9, 53.3, 44.7, 44.1, 50.7, 45.2, 60.1)
y <- c( 2.6,  3.1,  2.5,  5.0,  3.6,  4.0,  5.2,  2.8,  3.8)
cor.test(x, y, method = "spearm", alternative = "g")
test <- cor.test(x, y, method = "spearm", alternative = "g")
summary(test)
test$p.value
test$statistic
test <- cor.test(x, y, method = "spearm", method="spearman", conf.level = 0.95)
test <- cor.test(x, y, method = "spearman", method="spearman", conf.level = 0.95)
test <- cor.test(x, y, method = "spearman", conf.level = 0.95)
test
test$method
?spearman.ci
test$estimate
?boot::boot
install.packages('RVAideMemoire')
library(RVAideMemoire)
runApp('Desktop/Work/RShiny Stuff/survival_analysis_app')
